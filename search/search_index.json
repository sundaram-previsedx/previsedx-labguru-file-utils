{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PreviseDx Labguru File Utils","text":"<p>Collection of Python modules for processing Labguru Excel .xlsx files.</p>"},{"location":"#usage","title":"Usage","text":"<pre><code>from previsedx_labguru_file_utils import constants\nfrom previsedx_labguru_file_utils import LabguruXlsxParser\n\n# You can override any of the following by providing your own configuration file:\n# - the sheet name\n# - expected column headers\n# - the Excel library (default is openpyxl)\nconfig_file = \"conf/config.yaml\"\nif not os.path.exists(config_file):\n  config_file = constants.DEFAULT_CONFIG_FILE\nconfig = yaml.safe_load(Path(config_file).read_text())\n\nparser = Parser(\n    config=config,\n    config_file=config_file,\n    logfile=logfile,\n    outdir=outdir,\n    outfile=outfile,\n    verbose=verbose,\n)\n\ninfile = \"labguru.xlsx\"\nrecords = parser.get_records(infile)\n</code></pre>"},{"location":"#references","title":"References","text":"<p>GitHub PYPI</p>"},{"location":"CHANGELOG/","title":"CHANGELOG","text":""},{"location":"CHANGELOG/#v010-2024-09-08","title":"v0.1.0 - 2024-09-08","text":"<p>ADDS: - Initial check-in</p>"},{"location":"INSTALL/","title":"INSTALL","text":""},{"location":"INSTALL/#install-from-pypi","title":"Install from PYPI","text":"<p>Now you can install your package in your Python virtual environment</p> <pre><code>pip install previsedx-labguru-file-utils\n</code></pre>"},{"location":"INSTALL/#clone-project","title":"Clone project","text":"<p>You can <code>git clone</code> this project.</p> <pre><code>git clone https://github.com/sundaram-previsex/previsedx-labguru-file-utils.git\ncd previsedx-labguru-file-utils\n</code></pre>"},{"location":"INSTALL/#local-pip-install","title":"Local pip install","text":"<p>You can optionally establish a Python virtual environment. Then you can run the <code>setup.py</code> script to build to project and then run <code>pip install</code> to install in your local Python virtual environment.</p> <pre><code>virtualenv -p python3 venv\nsource venv/bin/activate\npython setup.py sdist\npip install .\n</code></pre>"},{"location":"INSTALL/#uninstall","title":"Uninstall","text":"<p>You can uninstall like this:</p> <pre><code>source venv/bin/activate\npip uninstall previsedx-labguru-file-utils\nmake clean\n</code></pre>"},{"location":"INSTALL/#developers","title":"Developers","text":"<p>If you modify the code in this package in your local virtual environment:</p> <pre><code>pip uninstall previsedx-labguru-file-utils\nmake clean\npython setup.py sdist\npip install .\n</code></pre>"},{"location":"INSTALL/#publish-to-pypi","title":"Publish to PYPI","text":"<p>You want can publish the code in this package to the PYPI repository.</p>"},{"location":"INSTALL/#install-twine-and-setuptools","title":"Install twine and setuptools","text":"<p>Install <code>twine</code> and <code>setuptools</code>.</p> <pre><code>pip install twine setuptools\n</code></pre>"},{"location":"INSTALL/#build-the-distribution-package","title":"Build the Distribution Package","text":"<pre><code>python setup.py sdist bdist_wheel\n</code></pre>"},{"location":"INSTALL/#configure-your-pypirc","title":"Configure your ~/.pypirc:","text":"<pre><code>[pypi]\n  username = __token__\n  password = pypi-YOUR-TOKEN\n</code></pre>"},{"location":"INSTALL/#upload-your-package-to-pypi","title":"Upload Your Package to PyPI","text":"<pre><code>twine upload dist/*\n</code></pre>"},{"location":"TODO/","title":"TODOs","text":"<ul> <li>unit tests (pytest)</li> </ul>"},{"location":"console_helper/","title":"Console Helper module","text":""},{"location":"constants/","title":"Constants module","text":""},{"location":"file_utils/","title":"File Utils module","text":"<p>A collection of utility functions for file management and data integrity.</p> <p>Functions: - calculate_md5(file_path): Calculate the MD5 hash of a file specified by its path. - check_indir_status(indir=None): Check the status of a directory, providing information on its existence and contents. - check_infile_status(infile, extension=None): Check the status of a file, including its existence and optionally validate its extension. - get_file_creation_date(file_path): Retrieve the creation date of a file specified by its path. - get_file_list(indir=None, extension=None): Get the list of files in the specified directory. - get_file_size(file_path): Get the size of a file specified by its path. - get_line_count(file_path): Get the number of lines in a file specified by its path. - is_binary_file(file_path, block_size=1024): Determine whether a file is binary or text.</p> <p>Use these functions to enhance file handling and data validation in your Python projects.</p>"},{"location":"file_utils/#previsedx_labguru_file_utils.file_utils.calculate_md5","title":"<code>calculate_md5(file_path)</code>","text":"<p>Calculate the md5 checksum for the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>the file for which the md5 checksum will be calculated</p> required <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>the calculated md5 checksum</p> Source code in <code>previsedx_labguru_file_utils/file_utils.py</code> <pre><code>def calculate_md5(file_path: str) -&gt; str:\n    \"\"\"Calculate the md5 checksum for the specified file.\n\n    Args:\n        file_path (str): the file for which the md5 checksum will be calculated\n\n    Returns:\n        str: the calculated md5 checksum\n    \"\"\"\n    md5_hash = hashlib.md5()\n    logging.info(f\"Will attempt to calculate the MD5 checksum for file '{file_path}'\")\n\n    with open(file_path, \"rb\") as file:\n        # Read the file in chunks to efficiently handle large files\n        for chunk in iter(lambda: file.read(4096), b\"\"):\n            md5_hash.update(chunk)\n\n    return md5_hash.hexdigest()\n</code></pre>"},{"location":"file_utils/#previsedx_labguru_file_utils.file_utils.check_indir_status","title":"<code>check_indir_status(indir=None)</code>","text":"<p>Check if the directory exists and is a regular directory.</p> <p>Parameters:</p> Name Type Description Default <code>indir</code> <code>str</code> <p>the directory to be checked</p> <code>None</code> Source code in <code>previsedx_labguru_file_utils/file_utils.py</code> <pre><code>def check_indir_status(indir: str = None) -&gt; None:\n    \"\"\"Check if the directory exists and is a regular directory.\n\n    Args:\n        indir (str): the directory to be checked\n    \"\"\"\n    error_ctr = 0\n\n    if indir is None or indir == '':\n        error_console.print(f\"'{indir}' is not defined\")\n        error_ctr += 1\n    else:\n        if not os.path.exists(indir):\n            error_ctr += 1\n            error_console.print(f\"directory '{indir}' does not exist\")\n        else:\n            if not os.path.isdir(indir):\n                error_ctr += 1\n                error_console.print(f\"'{indir}' is not a regular directory\")\n\n    if error_ctr &gt; 0:\n        error_console.print(f\"Detected problems with input directory '{indir}'\")\n        sys.exit(1)\n</code></pre>"},{"location":"file_utils/#previsedx_labguru_file_utils.file_utils.check_infile_status","title":"<code>check_infile_status(infile, extension=None)</code>","text":"<p>Check if the file exists, if it is a regular file and whether it has content.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>the file to be checked</p> required Source code in <code>previsedx_labguru_file_utils/file_utils.py</code> <pre><code>def check_infile_status(infile: str, extension: Optional[str] = None) -&gt; None:\n    \"\"\"Check if the file exists, if it is a regular file and whether it has\n    content.\n\n    Args:\n        infile (str): the file to be checked\n\n    Raises:\n        None\n    \"\"\"\n\n    error_ctr = 0\n\n    if infile is None or infile == \"\":\n        error_console.print(f\"'{infile}' is not defined\")\n        error_ctr += 1\n    else:\n        if not os.path.exists(infile):\n            error_ctr += 1\n            error_console.print(f\"'{infile}' does not exist\")\n        else:\n            if not os.path.isfile(infile):\n                error_ctr += 1\n                error_console.print(f\"'{infile}' is not a regular file\")\n            if os.stat(infile).st_size == 0:\n                error_console.print(f\"'{infile}' has no content\")\n                error_ctr += 1\n            if extension is not None and not infile.endswith(extension):\n                error_console.print(\n                    f\"'{infile}' does not have filename extension '{extension}'\"\n                )\n                error_ctr += 1\n\n    if error_ctr &gt; 0:\n        error_console.print(f\"Detected problems with input file '{infile}'\")\n        sys.exit(1)\n</code></pre>"},{"location":"file_utils/#previsedx_labguru_file_utils.file_utils.get_file_creation_date","title":"<code>get_file_creation_date(file_path)</code>","text":"<p>Determine the creation date for the specified file.</p> <p>Parameters:</p> Name Type Description Default <code>file_path</code> <code>str</code> <p>the absolute path of the file</p> required <p>Returns:</p> Name Type Description <code>datetime</code> <code>datetime</code> <p>the date the file was created according to the operating system</p> Source code in <code>previsedx_labguru_file_utils/file_utils.py</code> <pre><code>def get_file_creation_date(file_path: str) -&gt; datetime:\n    \"\"\"Determine the creation date for the specified file.\n\n    Args:\n        file_path (str): the absolute path of the file\n\n    Returns:\n        datetime: the date the file was created according to the operating system\n    \"\"\"\n    if platform.system() == \"Windows\":\n        # On Windows, use creation time\n        creation_time = os.path.getctime(file_path)\n    else:\n        # On Unix-based systems, use birth time (creation time)\n        # Note: Not all file systems support birth time, and it might not be available on some systems.\n        stat_info = os.stat(file_path)\n        creation_time = stat_info.st_mtime\n\n    # Convert the timestamp to a readable date\n    creation_date = datetime.fromtimestamp(creation_time)\n\n    return creation_date\n</code></pre>"},{"location":"file_utils/#previsedx_labguru_file_utils.file_utils.get_file_list","title":"<code>get_file_list(indir=None, extension=None)</code>","text":"<p>Get the list of files in the specified directory.</p> <p>Parameters:</p> Name Type Description Default <code>indir</code> <code>str</code> <p>the directory to search for files</p> <code>None</code> <code>extension</code> <code>str</code> <p>the file extension to filter on</p> <code>None</code> <p>Returns:</p> Name Type Description <code>file_list</code> <code>List[str]</code> <p>the list of files found in the directory</p> Source code in <code>previsedx_labguru_file_utils/file_utils.py</code> <pre><code>def get_file_list(indir: str = None, extension: str = None) -&gt; List[str]:\n    \"\"\"Get the list of files in the specified directory.\n\n    Args:\n        indir (str): the directory to search for files\n        extension (str): the file extension to filter on\n\n    Returns:\n        file_list (List[str]): the list of files found in the directory\n    \"\"\"\n    if extension is None:\n        logging.info(f\"Going to search for files in directory '{indir}'\")\n    else:\n        logging.info(f\"Going to search for files with extension '{extension}' in directory '{indir}'\")\n\n    file_list = []\n\n    for dirpath, dirnames, filenames in os.walk(indir):\n\n        if 'venv' in dirpath:\n            logging.info(f\"Going to ignore files in directory '{dirpath}'\")\n            continue\n        for name in filenames:\n            filepath = os.path.normpath(os.path.join(dirpath, name))\n            if os.path.isfile(filepath):\n                if extension is not None:\n                    if filepath.endswith(f'.{extension}'):\n                        file_list.append(filepath)\n                else:\n                    file_list.append(filepath)\n\n    return file_list\n</code></pre>"},{"location":"parser/","title":"Parser module","text":"<p>Class for parsing Lab Guru Report Data Excel file.</p>"},{"location":"parser/#previsedx_labguru_file_utils.parser.Parser","title":"<code>Parser</code>","text":"<p>Class for parsing Lab Guru Report Data Excel file.</p> Source code in <code>previsedx_labguru_file_utils/parser.py</code> <pre><code>class Parser:\n    \"\"\"Class for parsing Lab Guru Report Data Excel file.\"\"\"\n\n    def __init__(self, **kwargs):\n        \"\"\"Constructor for Parser.\"\"\"\n        self.config = kwargs.get(\"config\", None)\n        self.config_file = kwargs.get(\"config_file\", None)\n        self.infile = kwargs.get(\"infile\", None)\n        self.logfile = kwargs.get(\"logfile\", None)\n        self.outdir = kwargs.get(\"outdir\", None)\n        self.verbose = kwargs.get(\"verbose\", constants.DEFAULT_VERBOSE)\n\n        self.is_parsed = False\n        self.rec_ctr = 0\n        self.rec_list = []\n        self.sample_id_to_record_lookup = {}\n\n        self.error_ctr = 0\n        self.error_list = []\n\n        logging.info(f\"Instantiated Parser in file '{os.path.abspath(__file__)}'\")\n\n    def get_record(self, sample_id: str) -&gt; Record:\n        if not self.is_parsed:\n            self.get_records(self.infile)\n        logging.info(\n            f\"Labguru report data sample_id_to_record_lookup: {self.sample_id_to_record_lookup}\"\n        )\n\n        return self.sample_id_to_record_lookup.get(sample_id, None)\n\n    def _write_validation_report(self, infile: str) -&gt; None:\n        \"\"\"Write the validation report file.\n\n        Args:\n            infile (str): The input Lab Guru Report Data Excel file that was parsed.\n        \"\"\"\n        logging.info(f\"Will attempt to generate validation report for file '{infile}'\")\n        basename = os.path.basename(infile)\n        outfile = os.path.join(self.outdir, f\"{basename}.validation-report.txt\")\n\n        with open(outfile, \"w\") as of:\n            of.write(f\"## method-created: {os.path.abspath(__file__)}\\n\")\n            of.write(\n                f\"## date-created: {str(datetime.today().strftime('%Y-%m-%d-%H%M%S'))}\\n\"\n            )\n            of.write(f\"## created-by: {os.environ.get('USER')}\\n\")\n            of.write(f\"## infile: {infile}\\n\")\n            of.write(f\"## logfile: {self.logfile}\\n\")\n\n            if self.error_ctr &gt; 0:\n                of.write(\n                    f\"Encountered the following '{self.error_ctr}' validation errors:\\n\"\n                )\n                for error in self.error_list:\n                    of.write(f\"{error}\\n\")\n\n        logging.info(f\"Wrote file validation report file '{outfile}'\")\n        if self.verbose:\n            print(f\"Wrote file validation report file '{outfile}'\")\n</code></pre>"},{"location":"parser/#previsedx_labguru_file_utils.parser.Parser.__init__","title":"<code>__init__(**kwargs)</code>","text":"<p>Constructor for Parser.</p> Source code in <code>previsedx_labguru_file_utils/parser.py</code> <pre><code>def __init__(self, **kwargs):\n    \"\"\"Constructor for Parser.\"\"\"\n    self.config = kwargs.get(\"config\", None)\n    self.config_file = kwargs.get(\"config_file\", None)\n    self.infile = kwargs.get(\"infile\", None)\n    self.logfile = kwargs.get(\"logfile\", None)\n    self.outdir = kwargs.get(\"outdir\", None)\n    self.verbose = kwargs.get(\"verbose\", constants.DEFAULT_VERBOSE)\n\n    self.is_parsed = False\n    self.rec_ctr = 0\n    self.rec_list = []\n    self.sample_id_to_record_lookup = {}\n\n    self.error_ctr = 0\n    self.error_list = []\n\n    logging.info(f\"Instantiated Parser in file '{os.path.abspath(__file__)}'\")\n</code></pre>"},{"location":"record/","title":"Record module","text":""},{"location":"software_specification_template/","title":"Software specification template","text":"<p>Below is a simple software development specification template for designing and implementing a Python Command-Line Interface (CLI) program. Feel free to customize it based on your specific needs.</p>"},{"location":"software_specification_template/#software-development-specification","title":"Software Development Specification","text":""},{"location":"software_specification_template/#project-title","title":"Project Title","text":"<p>Objective: Briefly describe the purpose and goals of the project.</p>"},{"location":"software_specification_template/#table-of-contents","title":"Table of Contents","text":"<ol> <li>Introduction</li> <li>Requirements</li> <li>Functional Specifications</li> <li>3.1 Use Cases</li> <li>3.2 Features</li> <li>Technical Specifications</li> <li>4.1 Programming Language</li> <li>4.2 Dependencies</li> <li>4.3 Directory Structure</li> <li>4.4 CLI Interface</li> <li>Development Environment</li> <li>Testing</li> <li>Documentation</li> <li>Version Control</li> <li>Deployment</li> <li>Maintenance</li> </ol>"},{"location":"software_specification_template/#1-introduction","title":"1. Introduction","text":"<p>Provide an overview of the project, including its purpose, target audience, and any relevant background information.</p>"},{"location":"software_specification_template/#2-requirements","title":"2. Requirements","text":"<p>List the functional and non-functional requirements for the project.</p>"},{"location":"software_specification_template/#functional-requirements","title":"Functional Requirements","text":"<p>Functional requirements describe the specific features and capabilities that a software system must have to meet the intended use and purpose. Here are examples of functional requirements for a Python CLI program:</p>"},{"location":"software_specification_template/#1-user-authentication","title":"1. User Authentication","text":"<ul> <li>Description: The CLI program should support user authentication to ensure that only authorized users can access certain functionalities.</li> <li>Acceptance Criteria: Users must provide valid credentials (username and password) to log in. Unauthorized access attempts should be denied.</li> </ul>"},{"location":"software_specification_template/#2-file-processing","title":"2. File Processing","text":"<ul> <li>Description: The CLI program should be able to read, write, and manipulate files on the local filesystem.</li> <li>Acceptance Criteria: Users should be able to specify input and output files as command-line arguments. The program must handle common file formats like text files and CSV files.</li> </ul>"},{"location":"software_specification_template/#3-data-validation","title":"3. Data Validation","text":"<ul> <li>Description: The CLI program should validate user input to ensure that it meets specified criteria.</li> <li>Acceptance Criteria: If the user provides invalid input (e.g., a non-numeric value for a numeric parameter), the program should display an appropriate error message and prompt the user to provide valid input.</li> </ul>"},{"location":"software_specification_template/#4-data-filtering","title":"4. Data Filtering","text":"<ul> <li>Description: Users should be able to filter data based on specified criteria.</li> <li>Acceptance Criteria: The program should allow users to use command-line options to filter data based on attributes such as date ranges, categories, or keywords.</li> </ul>"},{"location":"software_specification_template/#5-reporting","title":"5. Reporting","text":"<ul> <li>Description: The CLI program should generate reports based on processed data.</li> <li>Acceptance Criteria: Users should be able to request and generate reports using command-line options. The reports may be displayed on the console or saved to a specified file.</li> </ul>"},{"location":"software_specification_template/#6-batch-processing","title":"6. Batch Processing","text":"<ul> <li>Description: The CLI program should support batch processing of multiple files or data sets.</li> <li>Acceptance Criteria: Users should be able to provide a list of input files or directories as arguments, and the program should process them in sequence or in parallel.</li> </ul>"},{"location":"software_specification_template/#7-logging","title":"7. Logging","text":"<ul> <li>Description: The CLI program should log relevant information for troubleshooting and auditing purposes.</li> <li>Acceptance Criteria: The program should generate log files containing information about user actions, errors, and warnings.</li> </ul>"},{"location":"software_specification_template/#8-configuration","title":"8. Configuration","text":"<ul> <li>Description: Users should be able to configure the behavior of the CLI program through a configuration file.</li> <li>Acceptance Criteria: The program should read settings from a configuration file, allowing users to customize parameters such as default directories, logging levels, or output formats.</li> </ul>"},{"location":"software_specification_template/#9-help-and-documentation","title":"9. Help and Documentation","text":"<ul> <li>Description: The CLI program should provide help messages and documentation to guide users.</li> <li>Acceptance Criteria: Users should be able to access help messages by using a <code>--help</code> option or similar. The help messages should provide information about available commands, options, and usage examples.</li> </ul>"},{"location":"software_specification_template/#10-interactive-mode","title":"10. Interactive Mode","text":"<ul> <li>Description: The CLI program should support an interactive mode for users who prefer a more dynamic and iterative experience.</li> <li>Acceptance Criteria: Users should have the option to launch the program in interactive mode, where they can enter commands and receive immediate feedback.</li> </ul> <p>These examples cover a range of functionalities commonly found in CLI programs. Depending on the nature of your specific Python CLI program, you may have additional or different functional requirements.</p>"},{"location":"software_specification_template/#non-functional-requirements","title":"Non-functional Requirements","text":"<p>Non-functional requirements describe the qualities or characteristics that define how a software system should perform, rather than specific behaviors or features. Here are examples of non-functional requirements for a Python CLI program:</p>"},{"location":"software_specification_template/#1-performance","title":"1. Performance","text":"<ul> <li>Response Time: The CLI program should respond to user input within 2 seconds, ensuring a responsive user experience.</li> <li>Throughput: The program should handle a minimum of 100 file processing operations per minute.</li> </ul>"},{"location":"software_specification_template/#2-scalability","title":"2. Scalability","text":"<ul> <li>Scalability: The program should be able to handle an increasing number of concurrent users without a significant decrease in performance.</li> <li>Data Volume: It should support processing large files or datasets without a significant impact on response time.</li> </ul>"},{"location":"software_specification_template/#3-reliability","title":"3. Reliability","text":"<ul> <li>Availability: The CLI program should be available 99.9% of the time during standard operating hours.</li> <li>Fault Tolerance: The program should gracefully handle unexpected errors and recover without data loss.</li> </ul>"},{"location":"software_specification_template/#4-security","title":"4. Security","text":"<ul> <li>Authentication: User authentication should use secure mechanisms (e.g., hashed passwords) to protect user credentials.</li> <li>Authorization: Access to sensitive functionalities or data should be restricted based on user roles and permissions.</li> </ul>"},{"location":"software_specification_template/#5-usability","title":"5. Usability","text":"<ul> <li>User Interface Consistency: The CLI program should have a consistent and intuitive command-line interface.</li> <li>Documentation: The program should be well-documented, providing clear instructions on installation, configuration, and usage.</li> </ul>"},{"location":"software_specification_template/#6-maintainability","title":"6. Maintainability","text":"<ul> <li>Code Maintainability: The source code should follow coding standards and be well-commented to facilitate future maintenance.</li> <li>Modularity: The program should be designed with modular components to ease updates and modifications.</li> </ul>"},{"location":"software_specification_template/#7-compatibility","title":"7. Compatibility","text":"<ul> <li>Operating System Compatibility: The CLI program should be compatible with major operating systems, including Windows, macOS, and Linux.</li> <li>Python Version: The program should be compatible with Python 3.6 and above.</li> </ul>"},{"location":"software_specification_template/#8-performance-monitoring","title":"8. Performance Monitoring","text":"<ul> <li>Logging: The program should log performance metrics, errors, and warnings for monitoring and troubleshooting purposes.</li> <li>Alerting: Alerts should be triggered for critical errors or performance degradation.</li> </ul>"},{"location":"software_specification_template/#9-portability","title":"9. Portability","text":"<ul> <li>Dependency Management: The program should manage external dependencies effectively to ensure consistent behavior across different environments.</li> <li>Configuration Portability: Configuration files should be portable between different installations.</li> </ul>"},{"location":"software_specification_template/#10-compliance","title":"10. Compliance","text":"<ul> <li>Regulatory Compliance: The CLI program should comply with relevant data protection and privacy regulations.</li> <li>License Compliance: The program and its dependencies should adhere to open-source licenses.</li> </ul>"},{"location":"software_specification_template/#11-testability","title":"11. Testability","text":"<ul> <li>Unit Testing: The code should be designed to facilitate unit testing, with a target coverage of 80% or above.</li> <li>Integration Testing: The program should have a suite of integration tests covering key functionalities.</li> </ul> <p>These non-functional requirements focus on aspects such as performance, reliability, security, usability, maintainability, compatibility, and compliance. Adjust and expand these requirements based on the specific needs and constraints of your Python CLI program.</p>"},{"location":"software_specification_template/#3-functional-specifications","title":"3. Functional Specifications","text":""},{"location":"software_specification_template/#31-use-cases","title":"3.1 Use Cases","text":"<p>List and describe the main use cases of the CLI program.</p>"},{"location":"software_specification_template/#32-features","title":"3.2 Features","text":"<p>Detail the features that the CLI program will provide.</p>"},{"location":"software_specification_template/#4-technical-specifications","title":"4. Technical Specifications","text":""},{"location":"software_specification_template/#41-programming-language","title":"4.1 Programming Language","text":"<p>Specify the programming language (Python) and version to be used.</p>"},{"location":"software_specification_template/#42-dependencies","title":"4.2 Dependencies","text":"<p>List any third-party libraries or modules that the project will depend on.</p>"},{"location":"software_specification_template/#43-directory-structure","title":"4.3 Directory Structure","text":"<p>Outline the recommended directory structure for the project.</p>"},{"location":"software_specification_template/#44-cli-interface","title":"4.4 CLI Interface","text":"<p>Describe the command-line interface, including commands, options, and arguments.</p>"},{"location":"software_specification_template/#5-development-environment","title":"5. Development Environment","text":"<p>Specify the development tools and environment needed for the project.</p>"},{"location":"software_specification_template/#6-testing","title":"6. Testing","text":"<p>Detail the testing approach, including unit tests, integration tests, and any testing frameworks to be used.</p>"},{"location":"software_specification_template/#7-documentation","title":"7. Documentation","text":"<p>Outline the documentation plan, including inline code comments, README files, and any user or developer documentation.</p>"},{"location":"software_specification_template/#8-version-control","title":"8. Version Control","text":"<p>Specify the version control system (e.g., Git) and repository hosting service.</p>"},{"location":"software_specification_template/#9-deployment","title":"9. Deployment","text":"<p>Describe the deployment process and any specific considerations.</p>"},{"location":"software_specification_template/#10-maintenance","title":"10. Maintenance","text":"<p>Provide information on ongoing maintenance, bug tracking, and potential future updates.</p> <p>This template is a starting point, and you can customize it based on the specific needs and complexity of your CLI program. Ensure that each section is detailed enough to guide the development and implementation process effectively.</p>"},{"location":"system_caller/","title":"System Caller module","text":""},{"location":"system_caller/#previsedx_labguru_file_utils.system_caller.execute_cmd","title":"<code>execute_cmd(cmd, outdir=None, stdout_file=None, stderr_file=None, verbose=DEFAULT_VERBOSE)</code>","text":"<p>Execute a command via system call using the subprocess module.</p> <p>Parameters:</p> Name Type Description Default <code>cmd</code> <code>str</code> <p>The executable to be invoked.</p> required <code>outdir</code> <code>str</code> <p>The output directory where STDOUT, STDERR and the shell script should be written to.</p> <code>None</code> <code>stdout_file</code> <code>str</code> <p>The file to which STDOUT will be captured in.</p> <code>None</code> <code>stderr_file</code> <code>str</code> <p>The file to which STDERR will be captured in.</p> <code>None</code> <p>Returns:     str: The path to the file where STDOUT was written to.</p> Source code in <code>previsedx_labguru_file_utils/system_caller.py</code> <pre><code>def execute_cmd(\n    cmd: str,\n    outdir: str = None,\n    stdout_file=None,\n    stderr_file=None,\n    verbose: bool = DEFAULT_VERBOSE,\n) -&gt; str:\n    \"\"\"Execute a command via system call using the subprocess module.\n\n    Args:\n        cmd (str): The executable to be invoked.\n        outdir (str): The output directory where STDOUT, STDERR and the shell script should be written to.\n        stdout_file (str): The file to which STDOUT will be captured in.\n        stderr_file (str): The file to which STDERR will be captured in.\n    Returns:\n        str: The path to the file where STDOUT was written to.\n    \"\"\"\n    if cmd is None:\n        raise Exception(\"cmd was not specified\")\n\n    cmd = cmd.strip()\n\n    logging.info(f\"Will attempt to execute '{cmd}'\")\n    if verbose:\n        print(f\"Will attempt to execute '{cmd}'\")\n\n    if outdir is None:\n        outdir = \"/tmp\"\n        logging.info(\n            f\"outdir was not defined and therefore was set to default '{outdir}'\"\n        )\n\n    if stdout_file is None:\n        stdout_file = _derive_std_file(cmd, outdir, \"stdout\")\n\n    if stderr_file is None:\n        stderr_file = _derive_std_file(cmd, outdir, \"stderr\")\n\n    if os.path.exists(stdout_file):\n        logging.info(\n            f\"STDOUT file '{stdout_file}' already exists so will delete it now\"\n        )\n        os.remove(stdout_file)\n\n    if os.path.exists(stderr_file):\n        logging.info(\n            f\"STDERR file '{stderr_file}' already exists so will delete it now\"\n        )\n        os.remove(stderr_file)\n\n    consolidated_cmd = cmd\n    p = subprocess.Popen(consolidated_cmd, shell=True)\n\n    (stdout, stderr) = p.communicate()\n\n    pid = p.pid\n\n    logging.info(f\"The child process ID is '{pid}'\")\n    if verbose:\n        print(f\"The child process ID is '{pid}'\")\n\n    p_status = p.wait()\n\n    p_returncode = p.returncode\n\n    if p_returncode is not None:\n        logging.info(f\"The return code was '{p_returncode}'\")\n    else:\n        logging.info(\"There was no return code\")\n\n    if p_status == 0:\n        logging.info(f\"Execution of cmd '{cmd}' has completed\")\n    else:\n        raise Exception(f\"Received status '{p_status}'\")\n\n    if stdout is not None:\n        logging.info(\"stdout is: \" + stdout_file)\n\n    if stderr is not None:\n        logging.info(\"stderr is: \" + stderr_file)\n\n    return stdout_file\n</code></pre>"},{"location":"xlsx/parser/","title":"Parser module","text":"<p>Class for parsing Lab Guru Report Data Excel file.</p>"},{"location":"xlsx/parser/#previsedx_labguru_file_utils.xlsx.parser.Parser","title":"<code>Parser</code>","text":"<p>               Bases: <code>Parser</code></p> <p>Class for parsing Lab Guru Report Data Excel file.</p> Source code in <code>previsedx_labguru_file_utils/xlsx/parser.py</code> <pre><code>class Parser(BaseParser):\n    \"\"\"Class for parsing Lab Guru Report Data Excel file.\"\"\"\n\n    def get_records(self, infile: str) -&gt; List[Record]:\n        \"\"\"Parser the tab-delimited file and retrieve a list of records.\n\n        Args:\n            infile (str): The Lab Guru Report Data Excel file to be parsed.\n        Returns:\n            List(Record): The parsed records.\n        \"\"\"\n        if self.is_parsed:\n            return self.rec_list\n\n        if infile is None:\n            infile = self.infile\n            if infile is None:\n                raise Exception(\"No input file provided to parse\")\n\n        logging.info(\n            f\"Will attempt to parse Lab Guru Report Data Excel file '{infile}'\"\n        )\n\n        check_infile_status(infile)\n\n        record_ctr = 0\n\n        sheet_name = (\n            self.config.get(\"lab_guru\", None)\n            .get(\"report_data\", None)\n            .get(\"sheet_name\", None)\n        )\n        if sheet_name is None or sheet_name == \"\":\n            sheet_name = constants.DEFAULT_LAB_GURU_REPORT_DATA_SHEET_NAME\n        logging.info(f\"sheet_name: {sheet_name}\")\n\n        header_row_number = (\n            self.config.get(\"lab_guru\", None)\n            .get(\"report_data\", None)\n            .get(\"header_row_number\", None)\n        )\n        if header_row_number is None or header_row_number == \"\":\n            header_row_number = constants.DEFAULT_LAB_GURU_REPORT_DATA_HEADER_ROW_NUMBER\n        logging.info(f\"header_row_number: {header_row_number}\")\n\n        engine = (\n            self.config.get(\"lab_guru\", None)\n            .get(\"report_data\", None)\n            .get(\"engine\", None)\n        )\n        if engine is None or engine == \"\":\n            engine = constants.DEFAULT_LAB_GURU_REPORT_DATA_ENGINE\n        logging.info(f\"engine: {engine}\")\n\n        expected_column_headers = (\n            self.config.get(\"lab_guru\", None)\n            .get(\"report_data\", None)\n            .get(\"expected_column_headers\", None)\n        )\n        if expected_column_headers is None or expected_column_headers == \"\":\n            raise Exception(\n                f\"Expected column headers not found in configuration file '{self.config_file}'\"\n            )\n\n        logging.info(f\"Here are the expected column headers: {expected_column_headers}\")\n        # Read the Excel file\n        df = pd.read_excel(\n            infile,\n            sheet_name=sheet_name,\n            header=int(header_row_number),\n            engine=engine,  # Need to install the following package to read Excel files with .xls extension: pip install xlrd==2.0.1\n        )\n        # print(df)\n        # print(\"DataFrame shape:\", df.shape)\n        # print(\"DataFrame columns:\", df.columns)\n\n        logging.info(\"Will check for missing expected column headers\")\n        # Check if the expected columns are present\n        missing_columns = [\n            col for col in expected_column_headers if col not in df.columns\n        ]\n        if missing_columns:\n            raise Exception(f\"Missing columns in the DataFrame: {missing_columns}\")\n\n        # Extract the relevant rows and columns\n        df = df.loc[0:, expected_column_headers]\n\n        # print(f\"head: {df.head()}\")\n        # sys.exit(1)\n\n        # Drop rows with any missing values to ensure data integrity\n        # df = df.dropna()\n\n        # print(df)\n\n        record_number = 0\n\n        logging.info(\"Will process the records now\")\n        for index, row in df.iterrows():\n            record_number += 1\n            row_dict = row.to_dict()\n\n            # Convert \"Collection Date\" to string if it's a Timestamp\n            if isinstance(row_dict.get(\"Collection Date\"), (Timestamp, date)):\n                row_dict[\"Collection Date\"] = row_dict[\"Collection Date\"].strftime(\n                    \"%Y-%m-%d\"\n                )\n\n            logging.info(f\"Here is the row_dict: {row_dict}\")\n\n            try:\n                record = Record(**row_dict)\n                logging.info(f\"Labguru report data record {record}\")\n                # import sys\n                # sys.exit(1)\n                self.rec_list.append(record)\n                self.rec_ctr += 1\n\n            except ValidationError as exc:\n                print(f\"Encountered some ValidationError exception: {repr(exc.errors()[0]['type'])}\")\n                # missing_fields = [error['loc'][0] for error in exc.errors() if error['msg'] == \"field required\"]\n                print(f\"Here are the errors: {exc.errors()}\")\n                raise exc\n\n            except Exception as e:\n                logging.error(\n                    f\"Encountered some exception with record number '{record_number}': {e}\"\n                )\n                self.error_ctr += 1\n                self.error_list.append(e)\n\n            record_ctr += 1\n\n        logging.info(\n            f\"Processed '{record_ctr}' records in Labguru data file '{infile}'\"\n        )\n\n        if self.error_ctr &gt; 0:\n\n            self._write_validation_report(infile)\n            sys.exit(1)\n        else:\n            logging.info(\"No errors encountered\")\n\n        self.is_parsed = True\n\n        logging.info(\"Will accumulate the records in the sample_id_to_record_lookup\")\n        for record in self.rec_list:\n            self.sample_id_to_record_lookup[str(record.previse_lab_id)] = record\n        return self.rec_list\n\n    def get_record(self, sample_id: str) -&gt; Record:\n        if not self.is_parsed:\n            self.get_records(self.infile)\n        logging.info(\n            f\"Labguru report data sample_id_to_record_lookup: {self.sample_id_to_record_lookup}\"\n        )\n        # import sys\n        # sys.exit(1)\n        return self.sample_id_to_record_lookup.get(sample_id, None)\n</code></pre>"},{"location":"xlsx/parser/#previsedx_labguru_file_utils.xlsx.parser.Parser.get_records","title":"<code>get_records(infile)</code>","text":"<p>Parser the tab-delimited file and retrieve a list of records.</p> <p>Parameters:</p> Name Type Description Default <code>infile</code> <code>str</code> <p>The Lab Guru Report Data Excel file to be parsed.</p> required <p>Returns:     List(Record): The parsed records.</p> Source code in <code>previsedx_labguru_file_utils/xlsx/parser.py</code> <pre><code>def get_records(self, infile: str) -&gt; List[Record]:\n    \"\"\"Parser the tab-delimited file and retrieve a list of records.\n\n    Args:\n        infile (str): The Lab Guru Report Data Excel file to be parsed.\n    Returns:\n        List(Record): The parsed records.\n    \"\"\"\n    if self.is_parsed:\n        return self.rec_list\n\n    if infile is None:\n        infile = self.infile\n        if infile is None:\n            raise Exception(\"No input file provided to parse\")\n\n    logging.info(\n        f\"Will attempt to parse Lab Guru Report Data Excel file '{infile}'\"\n    )\n\n    check_infile_status(infile)\n\n    record_ctr = 0\n\n    sheet_name = (\n        self.config.get(\"lab_guru\", None)\n        .get(\"report_data\", None)\n        .get(\"sheet_name\", None)\n    )\n    if sheet_name is None or sheet_name == \"\":\n        sheet_name = constants.DEFAULT_LAB_GURU_REPORT_DATA_SHEET_NAME\n    logging.info(f\"sheet_name: {sheet_name}\")\n\n    header_row_number = (\n        self.config.get(\"lab_guru\", None)\n        .get(\"report_data\", None)\n        .get(\"header_row_number\", None)\n    )\n    if header_row_number is None or header_row_number == \"\":\n        header_row_number = constants.DEFAULT_LAB_GURU_REPORT_DATA_HEADER_ROW_NUMBER\n    logging.info(f\"header_row_number: {header_row_number}\")\n\n    engine = (\n        self.config.get(\"lab_guru\", None)\n        .get(\"report_data\", None)\n        .get(\"engine\", None)\n    )\n    if engine is None or engine == \"\":\n        engine = constants.DEFAULT_LAB_GURU_REPORT_DATA_ENGINE\n    logging.info(f\"engine: {engine}\")\n\n    expected_column_headers = (\n        self.config.get(\"lab_guru\", None)\n        .get(\"report_data\", None)\n        .get(\"expected_column_headers\", None)\n    )\n    if expected_column_headers is None or expected_column_headers == \"\":\n        raise Exception(\n            f\"Expected column headers not found in configuration file '{self.config_file}'\"\n        )\n\n    logging.info(f\"Here are the expected column headers: {expected_column_headers}\")\n    # Read the Excel file\n    df = pd.read_excel(\n        infile,\n        sheet_name=sheet_name,\n        header=int(header_row_number),\n        engine=engine,  # Need to install the following package to read Excel files with .xls extension: pip install xlrd==2.0.1\n    )\n    # print(df)\n    # print(\"DataFrame shape:\", df.shape)\n    # print(\"DataFrame columns:\", df.columns)\n\n    logging.info(\"Will check for missing expected column headers\")\n    # Check if the expected columns are present\n    missing_columns = [\n        col for col in expected_column_headers if col not in df.columns\n    ]\n    if missing_columns:\n        raise Exception(f\"Missing columns in the DataFrame: {missing_columns}\")\n\n    # Extract the relevant rows and columns\n    df = df.loc[0:, expected_column_headers]\n\n    # print(f\"head: {df.head()}\")\n    # sys.exit(1)\n\n    # Drop rows with any missing values to ensure data integrity\n    # df = df.dropna()\n\n    # print(df)\n\n    record_number = 0\n\n    logging.info(\"Will process the records now\")\n    for index, row in df.iterrows():\n        record_number += 1\n        row_dict = row.to_dict()\n\n        # Convert \"Collection Date\" to string if it's a Timestamp\n        if isinstance(row_dict.get(\"Collection Date\"), (Timestamp, date)):\n            row_dict[\"Collection Date\"] = row_dict[\"Collection Date\"].strftime(\n                \"%Y-%m-%d\"\n            )\n\n        logging.info(f\"Here is the row_dict: {row_dict}\")\n\n        try:\n            record = Record(**row_dict)\n            logging.info(f\"Labguru report data record {record}\")\n            # import sys\n            # sys.exit(1)\n            self.rec_list.append(record)\n            self.rec_ctr += 1\n\n        except ValidationError as exc:\n            print(f\"Encountered some ValidationError exception: {repr(exc.errors()[0]['type'])}\")\n            # missing_fields = [error['loc'][0] for error in exc.errors() if error['msg'] == \"field required\"]\n            print(f\"Here are the errors: {exc.errors()}\")\n            raise exc\n\n        except Exception as e:\n            logging.error(\n                f\"Encountered some exception with record number '{record_number}': {e}\"\n            )\n            self.error_ctr += 1\n            self.error_list.append(e)\n\n        record_ctr += 1\n\n    logging.info(\n        f\"Processed '{record_ctr}' records in Labguru data file '{infile}'\"\n    )\n\n    if self.error_ctr &gt; 0:\n\n        self._write_validation_report(infile)\n        sys.exit(1)\n    else:\n        logging.info(\"No errors encountered\")\n\n    self.is_parsed = True\n\n    logging.info(\"Will accumulate the records in the sample_id_to_record_lookup\")\n    for record in self.rec_list:\n        self.sample_id_to_record_lookup[str(record.previse_lab_id)] = record\n    return self.rec_list\n</code></pre>"}]}